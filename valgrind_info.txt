
#include "../sigma_minishell.h"

void	setup_child_fds(int first_fd, int fd[2], t_cmds *cmd)
{
	if (first_fd != -1)
		dup2(first_fd, STDIN_FILENO);
	if (has_redir(cmd))
		exec_redirections(cmd);
	else if (cmd->next != NULL)
		dup2(fd[1], STDOUT_FILENO);
	if (cmd->next != NULL)
	{
		close(fd[0]);
		close(fd[1]);
	}
	if (first_fd != -1)
		close(first_fd);
}

void	execute_child(t_cmds *cmd, int first_fd, int fd[2], char **env)
{
	char	**cleaned_cmd;
	int		status;

	setup_child_fds(first_fd, fd, cmd);
	cleaned_cmd = array_to_exec(cmd);
	if (!cleaned_cmd || !cleaned_cmd[0])
	{
		ft_free_matrix(cleaned_cmd);
		children_killer(127);
	}
	if (is_builtin(cleaned_cmd[0]))
	{
		status = exec_builtin(cleaned_cmd[0], cleaned_cmd, env);
		ft_free_matrix(cleaned_cmd);
		children_killer(status);
	}
	else
	{
		exec_path(cleaned_cmd[0], cleaned_cmd, env);
		ft_free_matrix(cleaned_cmd);
		children_killer(127);
	}
}

int	setup_pipe(t_cmds *cmd, int *first_fd, int fd[2])
{
	if (cmd->next != NULL)
	{
		if (pipe(fd) == -1)
			return (-1);
	}
	return (0);
}

int	process_command(t_cmds *cmd, int *first_fd, char **env)
{
	int		fd[2];
	pid_t	pid;

	if (cmd->cmd == NULL)
		cmd->flag_to_exec = 1;
	if (cmd->flag_to_exec == 0)
	{
		if (setup_pipe(cmd, first_fd, fd) == -1)
			return (-1);
		pid = fork();
		if (pid == 0)
			execute_child(cmd, *first_fd, fd, env);
		if (*first_fd != -1)
			close(*first_fd);
		if ((cmd)->next != NULL)
		{
			close(fd[1]);
			*first_fd = fd[0];
		}
	}
	return (0);
}

int	has_heredocs(t_cmds *cmd)
{
	t_infile	*in;

	in = cmd->infiles;
	while (in)
	{
		if (ft_strcmp(in->token, "<<") == 0)
			return (1);
		in = in->next;
	}
	return (0);
}

#include "../sigma_minishell.h"

void	help_to_process(t_cmds *cmd, int p[2])
{
	close(p[0]);
	signal(SIGINT, sig_handle_hererdoc);
	process_all_heredocs(cmd->infiles, p);
	close(p[1]);
	children_killer(0);
}

int	process_command_heredocs(t_cmds *cmd)
{
	int		p[2];
	pid_t	pid;
	int		status;

	signal(SIGTTOU, SIG_IGN);
	signal(SIGTTIN, SIG_IGN);
	if (pipe(p) == -1)
		return (perror("pipe"), -1);
	pid = fork();
	if (pid == 0)
		help_to_process(cmd, p);
	else
	{
		close(p[1]);
		signal(SIGINT, SIG_IGN);
		waitpid(pid, &status, 0);
		restart_signals();
		close(p[0]);
		if (WIFEXITED(status) && WEXITSTATUS(status) == 130)
			return (btree()->exit_status = 130, -1);
	}
	return (0);
}

int	inside_first_while_loop(t_cmds *current)
{
	if (has_heredocs(current))
	{
		if (process_command_heredocs(current) < 0)
		{
			btree()->exit_status = 130;
			return (-1);
		}
	}
	return (0);
}

int	process_heredocs_and_checks(t_cmds *cmd)
{
	t_cmds	*current;

	current = cmd;
	signal(SIGINT, sig_handle_hererdoc);
	while (current)
	{
		if (has_heredocs(current))
		{
			if (process_command_heredocs(current) < 0)
			{
				btree()->exit_status = 130;
				return (btree()->exit_status);
			}
		}
		current = current->next;
	}
	if (btree()->global_signal == 130)
		return (130);
	return (0);
}

int	exec_pipes(t_cmds *cmd, char **env)
{
	int		first_fd;
	int		status;
	t_cmds	*current;

	first_fd = -1;
	if (!cmd || cmd->cmd[0] == NULL)
		return (0);
	current = cmd;
	// if (process_heredocs_and_checks(cmd) < 0)
    // 	return (btree()->exit_status);
	while (current)
	{
		if (process_command(current, &first_fd, env) == -1)
			return (-1);
		current = current->next;
	}
	while (wait(&status) > 0)
		;
	if (WIFEXITED(status))
		btree()->exit_status = WEXITSTATUS(status);
	else if (WIFSIGNALED(status))
		btree()->exit_status = 128 + WTERMSIG(status);
	return (btree()->exit_status);
}

#include "../sigma_minishell.h"

int	handle_heredoc(t_cmds *cmd)
{
	t_cmds *cur = cmd;
	t_infile *in;

	signal(SIGINT, sig_handle_hererdoc);
	while (cur)
	{
		in = cur->infiles;
		while (in)
		{
			if (ft_strcmp(in->token, "<<") == 0)
			{
				if (exec_double_left(in, cur) < 0)
					return (-1);
			}
			in = in->next;
		}
		cur = cur->next;
	}
	return (0);
}


int	handle_regular_redirections(t_cmds *cmd)
{
	t_infile	*in;

	in = cmd->infiles;
	while (in)
	{
		if (ft_strcmp(in->token, "<") == 0)
		{
			if (exec_single_left(in) < 0)
				return (1);
		}
		in = in->next;
	}
	if (exec_out_redirections(cmd->outfiles) < 0)
		return (-1);
	return (0);
}

void	pid_equal_zero_double(t_cmds *cmd, int p[2])
{
	close(p[0]);
	signal(SIGINT, sig_handle_hererdoc);
	process_all_heredocs(cmd->infiles, p);
	close(p[1]);
	megalodon_giga_chad_exit(0);
}

#include "../sigma_minishell.h"

int	is_redir_token(const char *s)
{
	return (strcmp(s, ">") == 0 || strcmp(s, ">>") == 0 || strcmp(s, "<") == 0
		|| strcmp(s, "<<") == 0);
}

int	has_redir(t_cmds *cmd)
{
	int	i;

	if (!cmd)
		return (0);
	if (cmd->infiles != NULL || cmd->outfiles != NULL)
		return (1);
	i = 0;
	while (cmd->cmd && cmd->cmd[i])
	{
		if (is_redir_token(cmd->cmd[i]))
			return (1);
		i++;
	}
	return (0);
}

int	count_tokens(t_cmds *cmd)
{
	int	i;
	int	count;

	i = 0;
	count = 0;
	while (cmd->cmd[i])
	{
		if (is_redir_token(cmd->cmd[i]) && cmd->cmd[i + 1])
			i += 2;
		else
		{
			count++;
			i++;
		}
	}
	return (count);
}

#include "../sigma_minishell.h"
#include <signal.h>
#include <stdio.h>

char	**array_to_exec(t_cmds *cmd)
{
	int		i;
	int		j;
	char	**new_argv;

	i = 0;
	j = 0;
	if (!cmd || !cmd->cmd)
		return (NULL);
	new_argv = malloc(sizeof(char *) * (count_tokens(cmd) + 1));
	if (!new_argv)
		return (NULL);
	while (cmd->cmd[i])
	{
		if (is_redir_token(cmd->cmd[i]) && cmd->cmd[i + 1])
			i += 2;
		else
			new_argv[j++] = strdup(cmd->cmd[i++]);
	}
	new_argv[j] = NULL;
	return (new_argv);
}

int	exec_single_left(t_infile *in)
{
	int	fd;

	if (access(in->file, F_OK) != 0)
		return (printf("BRUVA\n"), 1);
	fd = open(in->file, O_RDONLY);
	if (fd < 0)
		return (perror(in->file), -1);
	if (dup2(fd, STDIN_FILENO) < 0)
		return (perror("dup2"), close(fd), -1);
	close(fd);
	return (0);
}

int	exec_double_left(t_infile *in, t_cmds *cmd)
{
	int		p[2];
	pid_t	pid;
	int		status;
	// printf("DOUBLE LEFT\n");
	signal(SIGTTOU, SIG_IGN);
	signal(SIGTTIN, SIG_IGN);
	signal(SIGINT, sig_handle_hererdoc);
	if (pipe(p) == -1)
		return (perror("pipe"), -1);
	pid = fork();
	if (pid == 0)
	{
		close(p[0]);
		get_single_heredoc(in->file, p);
		close(p[1]);
		children_killer(0);
	}
	else
	{
		double_helper(status, p, pid);
		if (WIFEXITED(status) && WEXITSTATUS(status) == 130)
			return (close(p[0]), btree()->global_signal = 130, -1);
		in->heredoc_fd = p[0];
	}
	return (0);
}

int	exec_out_redirections(t_outfile *out)
{
	int	fd;
	int	flags;

	while (out)
	{
		flags = O_WRONLY | O_CREAT;
		if (ft_strcmp(out->token, ">") == 0)
			flags |= O_TRUNC;
		else if (ft_strcmp(out->token, ">>") == 0)
			flags |= O_APPEND;
		else
			return (fprintf(stderr, "Unknown redirection: %s\n", out->token),
				-1);
		fd = open(out->file, flags, 0644);
		if (fd < 0)
			return (perror(out->file), -1);
		if (dup2(fd, STDOUT_FILENO) < 0)
			return (perror("dup2"), close(fd), -1);
		close(fd);
		out = out->next;
	}
	return (0);
}

int	exec_redirections(t_cmds *cmd)
{
	t_infile	*in;

	in = cmd->infiles;
	if (cmd->cmd == NULL)
		cmd->flag_to_exec = 1;
	while (in)
	{
		if (ft_strcmp(in->token, "<<") == 0 && in->heredoc_fd > 0)
		{
			if (dup2(in->heredoc_fd, STDIN_FILENO) < 0)
				return (perror("dup2"), close(in->heredoc_fd), -1);
			close(in->heredoc_fd);
		}
		else if (ft_strcmp(in->token, "<") == 0)
		{
			if (exec_single_left(in) < 0)
				return (-1);
		}
		in = in->next;
	}
	if (exec_out_redirections(cmd->outfiles) < 0)
		return (btree()->cmds->flag_to_exec = 1, -1);
	return (0);
}

#include "../sigma_minishell.h"

char	**build_system_paths(char *cmd_name, char **paths)
{
	char	**final_str;
	char	*tmp;
	int		i;

	final_str = malloc(sizeof(char *) * (ft_matlen(paths) + 1));
	if (!final_str)
		return (NULL);
	i = 0;
	if (!paths)
		return (NULL);
	while (paths[i])
	{
		tmp = ft_strjoin(paths[i], "/");
		final_str[i] = ft_strjoin(tmp, cmd_name);
		free(tmp);
		i++;
	}
	final_str[i] = NULL;
	return (final_str);
}

char	**buildup_path(t_cmds *cmd, char **args, char **envp)
{
	char	**final_str;
	char	**paths_to_search;

	if (has_builtin(cmd))
	{
		final_str = malloc(sizeof(char *) * 2);
		if (!final_str)
			return (NULL);
		final_str[0] = ft_strdup(cmd->cmd[0]);
		final_str[1] = NULL;
		return (final_str);
	}
	if (is_system_path_command(cmd->cmd[0], envp))
	{
		paths_to_search = get_paths_to_search(envp);
		final_str = build_system_paths(cmd->cmd[0], paths_to_search);
		if (paths_to_search)
			ft_free_matrix(paths_to_search);
		return (final_str);
	}
	final_str = malloc(sizeof(char *));
	if (!final_str)
		return (NULL);
	final_str[0] = NULL;
	return (final_str);
}

int	ensure_outfile(t_outfile *out)
{
	int	fd;

	if (!out || !out->file)
		return (-1);
	fd = open(out->file, O_WRONLY | O_CREAT, 0644);
	if (fd < 0)
	{
		return (btree()->cmds->flag_to_exec = 1, my_ffprintf(out->file,
				"Permission denied\n"), -1);
	}
	close(fd);
	return (0);
}

int	check_infiles(t_cmds *cmds)
{
	t_infile	*current_infile;

	if (!cmds || !cmds->infiles)
		return (1);
	current_infile = cmds->infiles;
	while (current_infile)
	{
		if (ft_strcmp(current_infile->token, "<<") != 0)
		{
			if (access(current_infile->file, F_OK) != 0)
			{
				cmds->flag_to_exec = 1;
				my_ffprintf(current_infile->file,
					"No such file or directory\n");
				return (0);
			}
			if (access(current_infile->file, R_OK) != 0)
				return (cmds->flag_to_exec = 1,
					my_ffprintf(current_infile->file, "Permission denied\n"),
					0);
		}
		current_infile = current_infile->next;
	}
	return (1);
}

int	is_cmd_valid(t_cmds *cmd, char **args, char **envp)
{
	char	**paths;
	int		i;

	paths = buildup_path(cmd, args, envp);
	if (!paths)
		return (0);
	i = 0;
	while (paths[i])
	{
		if (access(paths[i], F_OK | X_OK) == 0)
			break ;
		i++;
	}
	ft_free_matrix(paths);
	return (paths[i] != NULL);
}

#include "../sigma_minishell.h"

void	handle_parent(pid_t pid, int shell_should_ignore)
{
	int	status;

	if (!shell_should_ignore)
		signal(SIGINT, set_to_onethirty);
	waitpid(pid, &status, 0);
	restart_signals();
	if (WIFEXITED(status))
		btree()->exit_status = WEXITSTATUS(status);
	else if (WIFSIGNALED(status))
		btree()->exit_status = 130;
}

void	prepare_signals_and_fork(t_cmds *cmd)
{
	pid_t	pid;
	int		shell_should_ignore;

	shell_should_ignore = 0;
	signal(SIGTTOU, SIG_IGN);
	signal(SIGTTIN, SIG_IGN);
	if (cmd_has_heredoc(cmd))
	{
		shell_should_ignore = 1;
		signal(SIGINT, SIG_IGN);
	}
	pid = fork();
	if (pid == 0)
		exec_child(cmd);
	else
		handle_parent(pid, shell_should_ignore);
}

int	exec_subshell(t_binary *subshell, char **args, char **envp)
{
	pid_t	pid;
	int		status;

	pid = fork();
	if (pid == 0)
		children_killer(exec_tree(subshell, args, envp));
	waitpid(pid, &status, 0);
	if (WIFEXITED(status))
		btree()->exit_status = WEXITSTATUS(status);
	else if (WIFSIGNALED(status))
		btree()->exit_status = 128 + WTERMSIG(status);
	return (btree()->exit_status);
}

int	cmd_has_heredoc(t_cmds *cmd)
{
	t_infile	*in;

	in = NULL;
	if (!cmd)
		return (0);
	in = cmd->infiles;
	while (in)
	{
		if (in->token && ft_strcmp(in->token, "<<") == 0)
			return (1);
		in = in->next;
	}
	return (0);
}

int	check_outfiles(t_cmds *cmds)
{
	t_outfile	*current_outfile;

	if (!cmds || !cmds->outfiles)
		return (1);
	current_outfile = cmds->outfiles;
	while (current_outfile)
	{
		if (ensure_outfile(current_outfile) < 0)
			return (0);
		current_outfile = current_outfile->next;
	}
	return (1);
}

#include "../sigma_minishell.h"

#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

void	exec_child(t_cmds *cmd)
{
	char	**cleaned;
	char	**updated_envs;

	if (cmd->flag_to_exec == 1)
		return ;
	signal(SIGINT, handle_sigint);
	cleaned = array_to_exec(cmd);
	updated_envs = list_to_char(*get_env_list());
	if (has_redir(cmd))
		exec_redirections(cmd);
	if (has_builtin(cmd))
		megalodon_giga_chad_exit(exec_builtin(cleaned[0], cleaned,
				updated_envs));
	else
		exec_path(cleaned[0], cleaned, updated_envs);
	free_matrix(cleaned);
	free_matrix(updated_envs);
}

int	exec_single_cmd(t_cmds *cmd)
{
	if (!cmd || !cmd->cmd)
		return (btree()->exit_status);
	if (cmd->flag_to_exec == 1)
		return (btree()->exit_status);
	if (has_builtin(cmd) && !has_redir(cmd))
		return (exec_single_cmd_aux(cmd));
	prepare_signals_and_fork(cmd);
	return (btree()->exit_status);
}

int	exec_node(t_binary *node, char **args, char **envp)
{
	if (!node)
		return (0);
	if (node->cmds != NULL)
	{
		expand_args(node->cmds);
		if (node->cmds->next)
			return (exec_pipes(node->cmds, btree()->env));
		else
			return (exec_single_cmd(node->cmds));
	}
	if (node->subshell != NULL)
		return (exec_subshell(node->subshell, args, envp));
	return (0);
}

int	check_order(t_binary *tree, char **args, char **envp)
{
	// printf("CHECKING ORDEN\n");
	if (handle_heredoc(tree->cmds) < 0)
		return (btree()->cmds->flag_to_exec = 1, -1);
	if (!check_infiles(tree->cmds))
		return (0);
	if (!check_outfiles(tree->cmds))
		return (0);
	if (!check_cmds(tree->cmds, args, envp))
		return (0);
	return (1);
}

int	exec_tree(t_binary *tree, char **args, char **envp)
{
	int	ret_left;

	if (btree()->cmds && btree()->cmds->flag_to_exec == 1)
		return (0);
	check_order(tree, args, envp);
	if (btree()->global_signal == 130)
		return (130);
	if (!tree)
		return (0);
	if (tree->logic && ft_strcmp(tree->logic, "&&") == 0)
	{
		ret_left = exec_tree(tree->left, args, envp);
		if (ret_left == 0)
			return (exec_tree(tree->right, args, envp));
		return (ret_left);
	}
	if (tree->logic && ft_strcmp(tree->logic, "||") == 0)
	{
		ret_left = exec_tree(tree->left, args, envp);
		if (ret_left != 0)
			return (exec_tree(tree->right, args, envp));
		return (ret_left);
	}
	return (exec_node(tree, args, envp));
}



	#include "../sigma_minishell.h"

	int	count_heredocs(t_infile *in)
	{
		int	count;

		count = 0;
		while (in)
		{
			if (ft_strcmp(in->token, "<<") == 0)
				count++;
			in = in->next;
		}
		return (count);
	}

	void	get_single_heredoc(char *eof, int fd[2])
	{
		char	*str;
		char	*delimiter;
		int		len;
		int		tty_fd;
		char	*expanded;
		t_cmds *cmd;

		delimiter = remove_aspas(eof);
		len = ft_strlen(delimiter);
		if (btree()->global_signal == 130)
			megalodon_giga_chad_exit(130);
		tty_fd = open("/dev/tty", O_RDONLY);
		if (tty_fd != -1)
		{
			dup2(tty_fd, STDIN_FILENO);
			close(tty_fd);
		}
		signal(SIGINT, sig_handle_hererdoc);
		// signal(SIGQUIT, SIG_IGN);
		str = readline("> ");
		while (str && ft_strncmp(str, delimiter, len + 1))
		{
			if (fd)
			{
				if (cmd && cmd->infiles && cmd->infiles->flag == 0)
					expanded = expand_hd(str);
				else
					expanded = str;
				write(fd[1], expanded, ft_strlen(expanded));
				write(fd[1], "\n", 1);
				if (expanded != str)
					free(expanded);
			}
			free(str);
			if (btree()->global_signal == 130)
				megalodon_giga_chad_exit(130);
			str = readline("> ");
		}
		if (!str && btree()->global_signal != 130)
			fprintf(stderr,
				"warning: here-document delimited by end-of-file (wanted `%s')\n",
				delimiter);
		free(str);
		free(delimiter);
	}

	void process_heredoc_recursive_simple(t_infile *current, int fd[2])
	{
		if (!current || btree()->global_signal == 130)
			exit(130); // child stops immediately

		if (ft_strcmp(current->token, "<<") == 0)
			get_single_heredoc(current->file, fd);

		if (btree()->global_signal == 130)
			children_killer(130); // in case it was triggered during heredoc

		process_heredoc_recursive_simple(current->next, fd);
	}



	void	process_all_heredocs(t_infile *in, int fd[2])
	{
		process_heredoc_recursive_simple(in, fd);
	}

#include "../sigma_minishell.h"
#include <signal.h>

void	handle_sigint(int sig)
{
	(void)sig;
	btree()->exit_status = 130;
	btree()->global_signal = 130;
	write(1, "\n", 1);
	if (btree()->global_signal != 131)
	{
		rl_on_new_line();
		rl_replace_line("", 0);
		rl_redisplay();
	}
}

void	set_to_onethirty(int sig)
{
	(void)sig;
	btree()->global_signal = 130;
	rl_replace_line("", 0);
}

void	sig_handle_hererdoc(int sig)
{
	(void)sig;
	signal(SIGTTOU, SIG_IGN);
	signal(SIGTTIN, SIG_IGN);
	btree()->global_signal = 130;
	btree()->exit_status = 130;
	write(1, "\n", 1);
	megalodon_giga_chad_exit(130);
}

void	handle_quit(int sig)
{
	(void)sig;
	signal(SIGQUIT, SIG_IGN);
}

int	restart_signals(void)
{
	if (btree()->global_signal == 130)
		btree()->global_signal = 0;
	signal(SIGINT, handle_sigint);
	signal(SIGQUIT, SIG_IGN);
	return (0);
}

#include "../sigma_minishell.h"

void	free_matrix(char **table)
{
	int	i;

	i = 0;
	if (!table)
		return ;
	while (table[i])
		free(table[i++]);
	free(table);
}

void	free_env_node(t_os_envs *env)
{
	if (!env)
		return ;
	free(env->linux_envs);
	free(env);
}

void	free_env_list(t_os_envs *head)
{
	t_os_envs	*temp;

	while (head)
	{
		temp = head->next;
		free_env_node(head);
		head = temp;
	}
}

void	clear_env_list(void)
{
	t_os_envs	**env_list;
	t_os_envs	*current;
	t_os_envs	*next;

	env_list = get_env_list();
	current = *env_list;
	while (current)
	{
		next = current->next;
		free(current->linux_envs);
		free(current->temp_vars);
		free(current);
		current = next;
	}
	*env_list = NULL;
}

void free_os_envs(void)
{
    t_os_envs **env_list = get_env_list();
    t_os_envs *current = *env_list;
    t_os_envs *next;

    while (current)
    {
        next = current->next;
        free(current->linux_envs);
        free(current->temp_vars);
        free(current);
        current = next;
    }
    *env_list = NULL;
}

void	ft_close(int fd)
{
	if (fd > 2)
		close(fd);
}

void	close_all_non_standart_fds(void)
{
	int	fd;

	fd = 2;
	while (++fd <= FOPEN_MAX)
		ft_close(fd);
}

void	megalodon_giga_chad_exit(int status)
{
	ft_free_matrix(btree()->env);
	free_os_envs();
	clear_env_list();
	close_all_non_standart_fds();
	binary_clear(btree());
	free(btree()->input);
	exit(status);
}

void	children_killer(int status)
{
	exit(status);
}


void	check_commands(char *cmd)
{
	if (btree()->cmds->flag_to_exec == 1)
		megalodon_giga_chad_exit(126);
	if (access(cmd, F_OK) != 0)
	{
		my_ffprintf(cmd, "No such file or directory\n");
		megalodon_giga_chad_exit(127);
	}
}

void	double_helper(int status, int p[2], pid_t pid)
{
	close(p[1]);
	signal(SIGINT, SIG_IGN);
	waitpid(pid, &status, 0);
	restart_signals();
}

int	check_cmds(t_cmds *cmds, char **args, char **envp)
{
	t_cmds	*current;

	if (!cmds || !cmds->cmd)
		return (1);
	current = cmds;
	while (current)
	{
		if (!is_cmd_valid(current, args, envp))
			return (0);
		current = current->next;
	}
	return (1);
}

#include "sigma_minishell.h"
#include <readline/history.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>

void	print_infiles(t_infile *file)
{
	while (file)
	{
		printf("%s %s\n", file->token, file->file);
		file = file->next;
	}
}

void	print_outfiles(t_outfile *file)
{
	while (file)
	{
		printf("%s %s\n", file->token, file->file);
		file = file->next;
	}
}

void	print_cmds(t_cmds *cmds)
{
	while (cmds)
	{
		printf("==================\n");
		printf("\t\tstarts infile\n");
		print_infiles(cmds->infiles);
		printf("\t\tend infile\n");
		printf("\t\tstarts commands\n");
		ft_print_matrix(cmds->cmd);
		printf("\t\tend commands\n");
		printf("\t\tstarts outfiles\n");
		print_outfiles(cmds->outfiles);
		printf("\t\tend outfiles\n");
		printf("==================\n");
		cmds = cmds->next;
	}
}

void	print_tree(t_binary *tree, int sub)
{
	// if (sub)
	// printf( "\nentering subshell\n");
	if (tree == NULL)
		return ;
	print_tree(tree->subshell, 1);
	print_tree(tree->left, 0);
	print_tree(tree->right, 0);
	if (tree->left == NULL && tree->right == NULL)
		if (tree->cmds)
			print_cmds(tree->cmds);
	if (sub)
		printf("\n^exiting shubshell^\n");
}

t_binary	*btree(void)
{
	static t_binary	tree;

	return (&tree);
}

static void	initialize_stuff(int argc, char *argv[], char **envp)
{
	if (isatty(STDIN_FILENO))
		tcgetattr(STDIN_FILENO, &btree()->orig_termios);
	signal(SIGINT, handle_sigint);
	signal(SIGQUIT, SIG_IGN);
	builtin_env(envp);
	if (am_i_truly_myself(argv[0]))
		update_shell_level(1);
	btree()->env = list_to_char(*get_env_list());
	btree()->os_env = *get_env_list();
	enhanced_sorting_stoled_from_jlima(btree()->os_env);
}

int	main(int argc, char *argv[], char **envp)
{
	initialize_stuff(argc, argv, envp);
	while (1)
	{
		btree()->input = readline("minishell$ ");
		if (!btree()->input)
			break ;
		restart_signals();
		add_history(btree()->input);
		if (*btree()->input == '\0')
		{
			free(btree()->input);
			continue ;
		}
		if (parsing(btree()->input) == 0)
		{
			btree()->main_exit = exec_tree(btree(), argv, btree()->env);
			restart_signals();
			free(btree()->input);
			binary_clear(btree());
		}
	}
	ft_free_matrix(btree()->env);
	free_os_envs();
	return (clear_env_list(), printf("Closing Minishell\n"),
		btree()->exit_status);
}


