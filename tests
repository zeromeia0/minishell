(in1 and in2 dont exist) < in1 < in2 cat > out1 > out2
    OKY
    
(in1 or in2 dont exit) < in1 < in2 cat > out1 > out2
(in1 and in2 exit) < in1 < in2 cat > out1 > out2
(in1 and in2 have perms) < in1 < in2 cat > out1 > out2
(in1 or in2 have perms) < in1 < in2 cat > out1 > out2

(out1 no perms out2 doesnt exist) < in1 < in2 cat > out1 > out2
(out2 no perms out1 doesnt exist) < in1 < in2 cat > out1 > out2

(out1 or out2 dont have perms) < in1 < in2 cat > out1 > out2
(out1 and out2 dont have perms) < in1 < in2 cat > out1 > out2
-- OKAY



(out1 and out2 dont have perms) << eof << eof cat > out1 > out2
(out1 or out2 dont have perms) << eof << eof cat > out1 > out2

(ctrl c before first eof) << eof << eof cat > out1 > out2
(ctrl c after first eof) << eof << eof cat > out1 > out2

(ctrl d before first eof) << eof << eof cat > out1 > out2
(ctrl d after first eof) << eof << eof cat > out1 > out2




< in1 < in2 cat > out1 > out2 | ls <-- ls doesn't work if first pipe command doesn't work
< in1 < in7 cat > out1 > out2 | something (IF SOMETHING PATH COMMAND, DOESN'T WORK)
    FIXED




<< eof << eof cat > out1 > out2 <-- CONTROL C IS LAKCING because of cat. control c is skipping but executing the stuff. COntrol c should stop everything
<< eof << eof cat > out1 > out2 | echo salve <--- CONTROL C STOPS EVERYTHING IN THIS CASE, WHY?

<< eof << eof cat > out1 > out2 <--- Heredoc should be executed before permission denied shows up

< eof1 << here AND cat < eof1 << here <--- Have different behaviour, study it

invalid free issue




